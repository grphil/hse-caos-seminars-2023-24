ls посмотреть содержимое папки
ls -l посмотреть содержимое папки в расширенном виде
ls -la посмотреть содержимое со скрытыми файлами (например .ssh)
ls -lh как с -l, но размеры файлов в читаемом виде

cd поменять папку (например cd Downloads)
В пути если встречается ../ то это уход на одну папку назад
cd ../ переместиться на одну папку назад

В пути если в начале /, то он считается абсолютно от корня, если в начале идет название папки или ./ то путь идет от текущей папки

pwd путь до текущей папки

mkdir <path> создать папку
rm <path> удалить файл по пути
rm -rf <path> удалить всё на пути path и дальше
rm -rf / удаляет всё

сat <path> вывести весь файл в терминал
head <path> -n <num> вывести первые num строк файла
tail <path> -n <num> вывести последние num строк файла

grep "asd" <path> найти все вхождения asd в файл на пути
grep "asd" -n <path> тоже самое, но ещё добавит номера строк
grep "asd" -rn <path> найти все вхождения строки asd во все файлы по пути path и дальше, оч удобная штука

В терминале оч удобно переключаться между старыми командами при помощи стрелое вверх и вниз

g++ file.cpp -o file скомпилировать file.cpp в бинарник file, можно указывать любые пути
./file запустить бинарный файл (программу, скомпилированную этим)
./file < input.txt передать на ввод input.txt
./file > output.txt вывод передать в output.txt
./file < input.txt > output.txt (можно совмещать)

Можно передавать вывод одной команды в другую и строить пайпы через |
./file | grep "228" найти все вхождения 228 в выводе программы ./file
./file | head -n 10 | grep "228" можно это совмещать

Остановить команду: control-C (сочетание клавиш)
Полностью остановить команду: control-D (это менее хорошо, поэтому юзайте реже)
Остановить ввод команде: control-D (удобно для выхода из питона, и всякого такого)

Питоновская консоль: python3 для выхода юзайте control-D

tmux (для фонового запуска, иногда оч удобно) https://tmuxcheatsheet.com/


vim <path> открывает файл по пути path для редактирования. Дальше читайте сами и пострадайте с vim, потом привыкните и это будет удобно для мелкого редактирования файлов.


СЕРВЕР:

Подключение: ssh <login>@<ip> (подключиться пользователем root к серверу с ip)
ssh root@123.45.67.89 (подключиться пользователем root к серверу по адресу 123.45.67.89)
Подключение по root лучше не юзать, лучше завести отдельного пользователя

В linux есть много пользователей, у каждого есть своя локальная директория /home/<username>/ для своих файлов, лучше всегда работать там

Создать пользователя: adduser grphil (создает пользователя с именем grphil)

Все файлы в linux имеют владельца и группу владения (это хорошо видно на ls -l)
Для владельца, группы владения и остальных бывают 3 типа прав на файл (read, write, execute). В ls -l это видно строкой rwxrwxrwx (первые rwx это пользователь, вторые rwx это группа владения, третьи rwx это для вообще всех).

Поменять права на файл: 
chmod +x <path> (добавить право на запуск для файла)
chmod g-x <path> (удалить право на запуск группе для файла)

Чтобы запустить не свои файлы, есть слово sudo, которое записывается перед командой. В этом случае у вас есть право читать, записывать и запускать любые файлы

rm -rf / не получится сделать под пользователем, потому что у вас нет прав на редактирование глобальных файлов системы
sudo rm -rf / удалит вообще всё с компа и ваш комп превратится в тыкву, sudo дает право это сделать

ssh ключи: 
Если ввести ssh-keygen на своем компе, то происходит магия и вам в папке ~/.ssh/ создается приватный и публичный ключи ssh. Дальше если закинуть публичный ключ ssh сервер, то можно к нему подключаться без пароля. 

Вот пример первоначальной настройки сервера linux на ubuntu

# Пусть у сервера ip 123.45.67.89
ssh root@123.45.67.89
# попросит ввести пароль от root, вам его скажут там, где покупали сервак

# создадим пользователя (выполняется когда подключились к серваку и находитесь в сессии терминала на нем)
adduser grphil
# там попросит ввести пароль, введите его, остальные поля можно скипать

# даем пользователю grphil право на sudo (выполняется когда подключились к серваку и находитесь в сессии терминала на нем)
sermod -aG sudo grphil

# выходим с сервака
ctrl-D

# запускаем локально на своем компе создание ssh ключа
ssh-keygen
# соглашайтесь со всем что есть, пароль обязательно оставьте пустым

# копируем локальный клю на сервер (вместо grphil введите свое имя пользователя)
ssh-copy-id grphil@123.45.67.89
# там попросит ввести пароль, вводим его


ssh grphil@123.45.67.89
# теперь пароль не попросит

Теперь можно так подключиться к серваку!




Копирование файлов между сервером и локальным:
(если вы знали про scp, забудьте о нем навсегда, он во всем хуже rsync)

rsync -azv <path1> <path2>
Копирует всё с пути path1 на путь path2. Опции azv просто запомните как магию, без них будет чуть хуже
Если путь локальный, то пишете его, если он на сервере, то добавляйте в начало название сервера (формата grphil@123.45.67.89) c двоеточием.

Если path1 заканчивается на /, то копируется все файлы содержащиеся в папке path1, если путь заканчиается не на /, то копируется явно то, что по пути path1

Примеры:

rsync -azv file grphil@123.45.67.89:/home/grphil/ (копирует file с локального компа на сервер, будет там доступно по пути /home/grphil/file)

rsync -azv grphil@123.45.67.89:/home/grphil/x/ ~/Downloads (копирует всё из папки /home/grphil/x/ на сервере в папку Downloads локально (но сама папка x не копируется))

Для удобного подключения по ssh можно локально создать настройки ssh, на linux и mac они лежат по пути ~/.ssh/config

Там можно написать

Host <name>
	HostName <ip>
	User <user>
	ServerAliveCountMax 720
    ServerAliveInterval 120
	IdentityFile ~/.ssh/id_rsa

Тогда во всяких подключениях по ssh и rsync вместо строки <user>@<ip> можно писать <name>, плюс будет сильно реже дисконектить с сервером.

Для установки openvpn на сервак юзайте скрипт отсюда https://github.com/Nyr/openvpn-install
